import { useState } from "react";
import { parseISO, format } from "date-fns";
import Head from "next/head";
import * as React from "react";
import Box from "@mui/material/Box";
import Stack from "@mui/material/Stack";
import CssBaseline from "@mui/material/CssBaseline";
import Container from "@mui/material/Container";
import Card from "@mui/material/Card";
import CardActions from "@mui/material/CardActions";
import CardContent from "@mui/material/CardContent";
import Button from "@mui/material/Button";
import Typography from "@mui/material/Typography";
import LinkIcon from "@mui/icons-material/Link";
import ScienceIcon from "@mui/icons-material/Science";
import Chip from "@mui/material/Chip";
import Grid from "@mui/material/Unstable_Grid2";

// タグデータ
const tagData = [
  "CSS",
  "開発",
  "HTML",
  "デザイン",
  "Notion",
  "React",
  "キャリア形成",
  "API",
  "SQL",
  "PHP",
  "JavaScript",
  "TypeScript",
  "Git",
  "Next.js",
  "Python",
  "Django",
  "web3.0",
  "CMS",
  "AWS",
  "Node.js",
  "AI",
  "React Native",
  "タグなし",
];

// 初期状態のオブジェクトを生成
const initialTagStates = tagData.reduce((acc, tag) => {
  const key = tag.replace(/\s+/g, "");
  acc[key] = false;
  return acc;
}, {});

// 日付変換
function formatDate(isoDateString) {
  const date = parseISO(isoDateString);
  return format(date, "yyyy/MM/dd HH:mm");
}

export default function NewsPage({ news }) {
  // タグの状態を管理するstateを一つにまとめる
  const [tags, setTags] = useState(initialTagStates);

  const handleTagClick = (tagKey) => {
    setTags((prev) => ({
      ...prev,
      [tagKey]: !prev[tagKey],
    }));
  };

  return (
    <>
      <Head>
        <title>ryokun Lab</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <React.Fragment>
        <CssBaseline />
        <Container maxWidth="sm">
          <Typography variant="h1" gutterBottom>
            ryokun Lab
            <ScienceIcon fontSize="large" />
          </Typography>
          <Box sx={{ width: "100%" }}>
            <Grid container spacing={1} mb={2}>
              {tagData.map((tag) => {
                const key = tag.replace(/\s+/g, "");
                return (
                  <Grid key={key}>
                    <Chip
                      label={tag}
                      variant={tags[key] ? "" : "outlined"}
                      color="info"
                      onClick={() => handleTagClick(key)}
                    />
                  </Grid>
                );
              })}
            </Grid>
            <Stack
              direction="column"
              justifyContent="flex-start"
              alignItems="center"
              spacing={1}
            >
              {news
                .filter((item) => {
                  // すべてのタグがfalseかどうかのチェック
                  if (Object.values(tags).every((val) => val === false))
                    return true;

                  // 特定のタグがtrueの場合、該当するニュースアイテムを表示
                  return item.tag.some(
                    (data) => tags[data.replace(/\s+/g, "")]
                  );
                })
                .map((item) => (
                  <Card sx={{ width: 400 }} key={item.id}>
                    <CardContent>
                      <Stack direction="row" spacing={1} mb={2}>
                        {item.tag.map((data, index) => (
                          <Chip label={data} key={index} color="info" />
                        ))}
                      </Stack>
                      <Typography sx={{ fontSize: 17 }} gutterBottom>
                        {item.title}
                      </Typography>
                      <Typography variant="h5" component="div"></Typography>
                      <Typography color="text.secondary">
                        {formatDate(item.created_at)}
                      </Typography>
                    </CardContent>
                    <CardActions>
                      <Button size="small" href={item.url} target="_blank">
                        <LinkIcon />
                        記事を見る
                      </Button>
                    </CardActions>
                  </Card>
                ))}
            </Stack>
          </Box>
        </Container>
      </React.Fragment>
    </>
  );
}

export async function getServerSideProps() {
  const res = await fetch(`${process.env.BASE_URL}/api/news?limit=1000`);
  const news = await res.json();

  return {
    props: {
      news,
    },
  };
}
